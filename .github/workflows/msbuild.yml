# The name of our workflow
name: Build
on: [push, pull_request]

jobs:
  msvc:
    strategy:
      matrix:
        arch: [x86, amd64, amd64_arm64]
        ossl: [openssl, openssl3]
        include:
        - arch: amd64_arm64
          triplet: arm64
        - arch: x86
          triplet: x86
        - arch: amd64
          triplet: x64

    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      SOLUTION_FILE_PATH: .
      BUILD_CONFIGURATION: Release
      VCPKG_OVERLAY_PORTS: '${{ github.workspace }}/openvpn/contrib/vcpkg-ports'
      buildDir: '${{ github.workspace }}/build/'

    name: "msvc - ${{matrix.triplet}} - ${{ matrix.ossl }}"
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: lukka/get-cmake@latest
    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.arch }}

    - name: Clone openvpn repo
      uses: actions/checkout@v2
      with:
        repository: openvpn/openvpn
        path: openvpn

    - name: Install dependencies
      uses: lukka/run-vcpkg@v7.4
      with:
        vcpkgGitCommitId: 'b18b17865cfb6bd24620a00f30691be6775abb96'
        vcpkgArguments: ${{ matrix.ossl }}
        vcpkgTriplet: '${{ matrix.triplet }}-windows'

    - name: Build
      uses: lukka/run-cmake@v3
      with:
        useVcpkgToolchainFile: true
        buildWithCMake: true
        cmakeBuildType: ${{env.BUILD_CONFIGURATION}}
        buildDirectory: ${{ env.buildDir }}

    - uses: actions/upload-artifact@v2
      with:
        name: openvpn-gui_${{ matrix.triplet }}_${{ matrix.ossl }}
        path: |
          ${{ env.buildDir }}/*.exe
          ${{ env.buildDir }}/*.dll

  mingw:
    strategy:
      fail-fast: false
      matrix:
        openssl_version: [1.1.1m, 3.0.1]
        target: [mingw64, mingw]
        include:
          - target: mingw64
            chost: x86_64-w64-mingw32
          - target: mingw
            chost: i686-w64-mingw32

    name: "gcc-mingw - ${{matrix.target}} - ossl${{ matrix.openssl_version }}"
    runs-on: ubuntu-20.04

    env:
      MAKEFLAGS: -j3

    steps:
      - name: Install dependencies
        run: sudo apt update && sudo apt install -y mingw-w64 libtool automake autoconf
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: openvpn-gui

      - name: autoconf
        run: autoreconf -fvi
        working-directory: openvpn-gui

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v2
        with:
          path: '~/mingw/'
          key: mingw-${{ matrix.target }}-${{ matrix.openssl_version }}

      - name: Download mingw dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          wget -c -P download-cache/ "https://www.openssl.org/source/openssl-${{ matrix.openssl_version }}.tar.gz"
          tar zxf "download-cache/openssl-${{ matrix.openssl_version }}.tar.gz"

      - name: Configure OpenSSL
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./Configure --cross-compile-prefix=${{ matrix.chost }}- shared ${{ matrix.target }} no-capieng --prefix="${HOME}/mingw/opt" --openssldir="${HOME}/mingw/opt" -static-libgcc
        working-directory: "./openssl-${{ matrix.openssl_version }}"

      - name: Build OpenSSL
        if: steps.cache.outputs.cache-hit != 'true'
        run: make
        working-directory: "./openssl-${{ matrix.openssl_version }}"

      - name: Install OpenSSL
        if: steps.cache.outputs.cache-hit != 'true'
        run: make install
        working-directory: "./openssl-${{ matrix.openssl_version }}"

      - name: configure
        # openssl3 uses lib64 on mingw64
        run: |
            [[ "${{ matrix.openssl_version }}" == "3.0.1" && "${{ matrix.target  }}" == "mingw64" ]] && LIB="lib64" || LIB="lib"
            PKG_CONFIG_PATH=${HOME}/mingw/opt/${LIB}/pkgconfig ./configure --host=${{ matrix.chost }} --enable-password-change=yes
        working-directory: openvpn-gui

      - name: make
        run: make
        working-directory: openvpn-gui

